[{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://johnaponte.github.io/ssutil/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://johnaponte.github.io/ssutil/articles/equivalence.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Equivalence Testing for Normal Outcomes","text":"vignette illustrates sim_power_equivalence_normal() function can used estimate empirical power equivalence test assumption normally distributed outcomes. method simulates repeated trials determines whether pairwise confidence intervals differences group means fall within user-specified equivalence limits.","code":""},{"path":"https://johnaponte.github.io/ssutil/articles/equivalence.html","id":"example-equivalence-among-vaccine-lots","dir":"Articles","previous_headings":"","what":"Example: Equivalence Among Vaccine Lots","title":"Equivalence Testing for Normal Outcomes","text":"evaluation conducted determine whether three manufacturing lots vaccine produce equivalent immune responses. outcome antibody concentration measured log10log_{10} scale, assumed follow normal distribution standard deviation 0.4. Equivalence declared confidence intervals ratio pairwise comparisons fall entirely within range [2/3, 3/2]. Since analysis conducted log10log_{10} scale, equivalence limits transformed log10(2/3) log10(3/2). total 1,000 trials simulated 172 subjects per group 95% confidence level: result shows proportion simulations pairwise comparisons satisfy equivalence criterion. power calculation nQuery® shows Two One-Sided Equivalence Test (TOST) two-group design, alpha level 0.025, 172 participants per group, standard deviation 0.4, equivalence limits log10(2/3) log10(3/2), power 96.98%. extended three comparisons, assuming independence, joint probability three satisfying equivalence condition approximately: 96.98%3=91.21%96.98\\%^3 = 91.21\\%.","code":"set.seed(12345) sim_power_equivalence_normal(   ngroups = 3,   npergroup = 172,   sd = 0.4,   llimit = log10(2/3),   ulimit = log10(3/2),   nsim = 1000,   t_level = 0.95 ) #> Empirical Power Result #> -----------------------  #> Power:       0.9130 #> 95% CI:      [0.8938, 0.9297] #> Simulations: 1000"},{"path":"https://johnaponte.github.io/ssutil/articles/iz_binomial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Selecting the best group using the Indifferent-Zone approach for binomial outcomes","text":"indifferent-zone approach binomial outcomes statistical method designed select group highest event probability ensuring selection made correctly specified confidence level. approach assumes difference event probability best group next-best group exceeds specified threshold, called “indifferent zone”. zone defines margin indifference, within differences considered negligible, allowing decision process focus differences clearly exceed margin. package offers several functions help design: power_best_binomial() calculates exact probability correctly selecting best group given event probability best group (p1), pre-specified indifferent-zone threshold (dif), number groups (ngroups), sample size per group (npergroup). function based Sobel Huyett (1957) least favorable configuration (.e., assuming groups event probability equal best group’s probability minus indifferent-zone threshold). ss_best_binomial() estimates required sample size per group achieve specified power correctly selecting best group, given event probability best group (p1), indifferent-zone threshold (dif), number groups (ngroups). sim_power_best_binomial() estimates empirical power (.e., proportion simulated trials best group correctly identified) via Monte Carlo simulation. supports multiple outcomes can estimate empirical power select true best group across outcomes. sim_power_best_bin_rank() similar sim_power_best_binomial(), defines best group based overall ranking across multiple outcomes rather requiring top performance every outcome. wcs_power_best_binomial() searches probability best group leads lowest power given pre-specified indifferent-zone threshold (dif), number groups (ngroups), sample size per group (npergroup)","code":""},{"path":"https://johnaponte.github.io/ssutil/articles/iz_binomial.html","id":"examples-with-a-single-outcome","dir":"Articles","previous_headings":"","what":"Examples with a single outcome","title":"Selecting the best group using the Indifferent-Zone approach for binomial outcomes","text":"probability correctly selecting best group trial three groups 30 participants ? Assume best group event probability 90% indifferent-zone threshold 10%. sample size required per group achieve 90% power correctly selecting best group among three groups, assuming best group event probability 90% indifferent-zone threshold 10%. Using simulations, probability correctly selecting best group trial three groups 30 participants ? Assume best group event probability 90% indifferent-zone threshold 10%. lowest power study indifference-zone setup 10%, 3 groups 50 participants per group?","code":"power_best_binomial(p1 = 0.9, dif = 0.1, ngroups = 3, npergroup = 30) #> [1] 0.7584432 ss_best_binomial(power = 0.9, p1 = 0.9, dif = 0.1, ngroups = 3) #> [1] 64 set.seed(12345) sim_power_best_binomial(   noutcomes = 1,   p1 = 0.9,   dif = 0.1,   ngroups = 3,   npergroup = 30,   nsim = 1000 ) #> Empirical Power Result #> -----------------------  #> Power:       0.7740 #> 95% CI:      [0.7468, 0.7996] #> Simulations: 1000 wcs_power_best_binomial(dif = 0.1, ngroups = 3, npergroup = 50) #> $p1 #> [1] 0.5541703 #>  #> $minimum_power #> [1] 0.7410576"},{"path":"https://johnaponte.github.io/ssutil/articles/iz_binomial.html","id":"examples-using-multiple-outcomes","dir":"Articles","previous_headings":"","what":"Examples using multiple outcomes","title":"Selecting the best group using the Indifferent-Zone approach for binomial outcomes","text":"sim_power_best_binomial() sim_power_best_bin_rank() allow simulating multiple outcomes. functions differ define ‘best’ group. sim_power_best_binomial() requires best group top performer every outcome, whereas sim_power_best_bin_rank() defines best group based overall ranking across outcomes. example, group might rank first first two outcomes second third, yet still achieve best overall rank among groups. ranking approach supports weighting outcomes, allowing greater importance assigned outcomes others. instance, performance first two outcomes twice important third, weights c(0.4, 0.4, 0.2) can specified. Weights scaled internally sum 1. functions flexible allow specification , outcome, event probabilities, indifferent-zone thresholds, group sample sizes. probability best group correctly identified highest seroconversion rate across five antigens trial three groups 30 participants ? Assume best group’s seroconversion rate 80% indifferent-zone threshold 10% outcomes. setup, define best group based overall ranking across five outcomes equal weights.","code":"set.seed(12345) sim_power_best_binomial(   noutcomes = 5,   p1 = 0.8,   dif = 0.10,   ngroups = 3,   npergroup = 30,   nsim = 1000 ) #> Empirical Power Result #> -----------------------  #> Power:       0.1670 #> 95% CI:      [0.1444, 0.1916] #> Simulations: 1000 set.seed(12345) sim_power_best_bin_rank(   noutcomes = 5,   p1 = 0.8,   dif = 0.10,   weights = 1,   ngroups = 3,   npergroup = 30,   nsim = 1000 ) #> Empirical Power Result #> -----------------------  #> Power:       0.9190 #> 95% CI:      [0.9003, 0.9352] #> Simulations: 1000"},{"path":"https://johnaponte.github.io/ssutil/articles/iz_binomial.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Selecting the best group using the Indifferent-Zone approach for binomial outcomes","text":"Sobel, M., & Huyett, M. J. (1957). Selecting Best One Several Binomial Populations. Bell System Technical Journal, 36(2), 537-576. https://doi.org/10.1002/j.1538-7305.1957.tb02411.x Bechhofer, R. E., Santner, T. J., & Goldsman, D. M. (1995). Design analysis experiments statistical selection, screening, multiple comparisons. Wiley. ISBN 978-0-471-57427-9","code":""},{"path":"https://johnaponte.github.io/ssutil/articles/iz_normal.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Selecting the best group using the Indifferent-Zone approach for normal outcomes","text":"indifferent-zone approach normal outcomes statistical method designed select group highest mean ensuring selection made correctly specified confidence level. approach assumes difference means best group next-best group exceeds specified threshold, called “indifferent zone”. zone defines margin indifference, within differences considered negligible, allowing decision process focus differences clearly exceed margin. procedures presented based single stage selection outcome known standard deviation. standard deviation known, multiple stage approach recommended, assume true standard deviation larger specified standard deviation. power higher true standard deviation lower. package offers several functions help design: power_best_normal() calculates outcome known standard deviation (sd) probability correctly selecting best group single stage, given pre-specified indifferent-zone threshold (dif), number groups (ngroups), sample size per group (npergroup). ss_best_binomial() estimates required sample size per group achieve specified power correctly selecting single stage best group, given known standard deviation (sd), indifferent-zone threshold (dif), number groups (ngroups). function based procedure 𝒩b\\mathscr{N}b Bechhofer et al (1995) sim_power_best_normal() estimates empirical power (.e., proportion simulated trials best group correctly identified) via Monte Carlo simulation. supports multiple outcomes can estimate empirical power select true best group across outcomes. sim_power_best_bin_rank() similar sim_power_best_binomial(), defines best group based overall ranking across multiple outcomes rather requiring top performance every outcome.","code":""},{"path":"https://johnaponte.github.io/ssutil/articles/iz_normal.html","id":"examples-with-a-single-outcome","dir":"Articles","previous_headings":"","what":"Examples with a single outcome","title":"Selecting the best group using the Indifferent-Zone approach for normal outcomes","text":"probability correctly selecting single stage best group trial three groups 30 participants ? Assume outcome standard deviation 0.5 indifferent-zone threshold 0.25. sample size required per group achieve 80% power correctly selecting single stage best group among three groups, assuming outcome known standard deviation 0.5 indifferent-zone threshold 0.10 Using simulations, probability correctly selecting best group trial three groups 30 participants ? Assume standard deviation 0.5 indifferent-zone threshold 0.1","code":"power_best_normal(sd = 0.5, dif = 0.10, ngroups = 3, npergroup = 30) #> [1] 0.660936 ss_best_normal(power = 0.8, sd = 0.5, dif = 0.1, ngroups = 3) #> [1] 68.27888 set.seed(1234) sim_power_best_normal(   noutcomes = 1,   sd = 0.5,   dif = 0.1,   ngroups = 3,   npergroup = 30,   nsim = 1000 ) #> Empirical Power Result #> -----------------------  #> Power:       0.6640 #> 95% CI:      [0.6338, 0.6933] #> Simulations: 1000"},{"path":"https://johnaponte.github.io/ssutil/articles/iz_normal.html","id":"examples-using-multiple-outcomes","dir":"Articles","previous_headings":"","what":"Examples using multiple outcomes","title":"Selecting the best group using the Indifferent-Zone approach for normal outcomes","text":"sim_power_best_normal() sim_power_best_norm_rank() allow simulating multiple outcomes. functions differ define ‘best’ group. sim_power_best_normal() requires best group top performer every outcome, whereas sim_power_best_norm_rank() defines best group based overall ranking across outcomes. example, group might rank first first two outcomes second third, yet still achieve best overall rank among groups. procedures assume multiple outcomes independent . ranking approach supports weighting outcomes, allowing assign greater importance outcomes others. instance, performance first two outcomes twice important third, specify weights c(0.4, 0.4, 0.2). Weights scaled internally sum 1. functions flexible allow specify, outcome, event probabilities, indifferent-zone thresholds, group sample sizes probability best group correctly identified highest antibody titres rate across five antigens trial three groups 30 participants ? standard deviation know assume greater 0.5, indifferent-zone threshold 0.1 outcomes. setup, define best group based overall ranking across five outcomes equal weights.","code":"set.seed(12345) sim_power_best_normal(   noutcomes = 5,   sd = 0.5,   dif = 0.10,   ngroups = 3,   npergroup = 30,   nsim = 1000 ) #> Empirical Power Result #> -----------------------  #> Power:       0.1150 #> 95% CI:      [0.0959, 0.1364] #> Simulations: 1000 set.seed(12345) sim_power_best_norm_rank(   noutcomes = 5,   sd = 0.5,   dif = 0.10,   weights = 1,   ngroups = 3,   npergroup = 30,   nsim = 1000 ) #> Empirical Power Result #> -----------------------  #> Power:       0.8700 #> 95% CI:      [0.8476, 0.8902] #> Simulations: 1000"},{"path":"https://johnaponte.github.io/ssutil/articles/iz_normal.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Selecting the best group using the Indifferent-Zone approach for normal outcomes","text":"Bechhofer, R. E., Santner, T. J., & Goldsman, D. M. (1995). Design analysis experiments statistical selection, screening, multiple comparisons. Wiley. ISBN 978-0-471-57427-9","code":""},{"path":"https://johnaponte.github.io/ssutil/articles/negative_binomial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulations for Negative Binomial outcomes","text":"sim_power_nbinom function used estimate empirical power negative binomial regression model. method useful outcomes consist dispersed count data, objective test whether relative risk (RR) two groups differs significantly null boundary. Data simulated negative binomial distribution, model fit using glm.nb, determined whether null hypothesis rejected based confidence interval limits relative specified boundary. procedure accounts whether true RR 1, applying appropriate directional test logic.","code":""},{"path":"https://johnaponte.github.io/ssutil/articles/negative_binomial.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Simulations for Negative Binomial outcomes","text":"empirical power using negative binomial regression detect efficacy vaccine 95% lower vaccine efficacy boundary 30% assuming true vaccine efficacy 60%? sample size 500 per group average follow-1 year, event rate 0.25 episode per person-year control group, dispersion parameter 2?","code":"library(ssutil) set.seed(123) result <- sim_power_nbinom(   n1 = 500, n2 = 500,   ir1 = 0.2, tm = 1,   rr = 0.4, boundary = 0.7,   dispersion = 2,   alpha = 0.05,   nsim = 1000 )  result #> Empirical Power Result #> -----------------------  #> Power:       0.7990 #> 95% CI:      [0.7728, 0.8234] #> Simulations: 1000"},{"path":"https://johnaponte.github.io/ssutil/articles/non_inferiority.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulations for Non-inferiority trials","text":"Non-inferiority tests used clinical trials objective demonstrate new treatment significantly worse reference treatment pre-specified margin. designs involving multiple outcomes, may required outcomes meet strict non-inferiority criteria (e.g., primary outcomes) others can meet flexible conditions (e.g., least two three secondary outcomes). vignette shows use sim_power_ni_normal() function ssutil package estimate power design.","code":""},{"path":"https://johnaponte.github.io/ssutil/articles/non_inferiority.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Simulations for Non-inferiority trials","text":"empirical power trial wants evaluate non-inferiority immune response vaccine 7 serotypes? Non-inferiority achieved geometric mean ratio candidate vaccine reference greater 0.5 first two antigens, three five. example simulates 1000 trials 125 participants per group, 7 independent outcomes, standard deviation 0.8 log10 scale outcomes, common non-inferiority margin equivalent log10(2/3). Non-inferiority required first two outcomes, least three remaining five. result shows proportion simulations full non-inferiority rule satisfied.","code":"library(ssutil) set.seed(123)  res <- sim_power_ni_normal(   nsim = 1000,   npergroup = 125,   ntest = 7,   ni_limit = log10(2/3),   test_req = 2,   test_opt = 3,   sd = 0.8,   corr = 0,   t_level = 0.05 )  res #> Empirical Power Result #> -----------------------  #> Power:       0.9120 #> 95% CI:      [0.8927, 0.9288] #> Simulations: 1000 library(ssutil)"},{"path":"https://johnaponte.github.io/ssutil/articles/power_single_rate.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Detectable Event Rate for Safety Signal Detection: Using `power_single_rate`","text":"One important question drug safety monitoring rare event studies : “Given specific sample size desired statistical power, smallest event rate (proportion) can reliably detected (.e., least one event expected set probability)?” function power_single_rate() addresses calculating minimum true underlying proportion event needed, , specified sample size, specified power observe least one event. typically used clinical trial planning post-marketing safety surveillance, event (serious adverse reaction) rare, assuring high probability observe least one event true rate sufficiently high crucial safety oversight.","code":""},{"path":"https://johnaponte.github.io/ssutil/articles/power_single_rate.html","id":"function","dir":"Articles","previous_headings":"","what":"Function","title":"Detectable Event Rate for Safety Signal Detection: Using `power_single_rate`","text":"function signature : subjects: Integer vector. Sample size(s). power: Numeric vector. Desired power(s), 0 1. function returns matrix (class power_single_rate) columns: - n: sample size, - power: statistical power, - proportion: minimum detectable event rate. formatted print summary provided nice displays.","code":"power_single_rate(subjects, power)"},{"path":[]},{"path":"https://johnaponte.github.io/ssutil/articles/power_single_rate.html","id":"example-1-100-subjects-power-0-95","dir":"Articles","previous_headings":"Examples","what":"Example 1: 100 Subjects, Power 0.95","title":"Detectable Event Rate for Safety Signal Detection: Using `power_single_rate`","text":"Suppose want know lowest event rate provide 95% chance observing least one event among 100 subjects.","code":"library(ssutil) power_single_rate(100, 0.95) ## A study with 100 participants would have 95% power to detect at least one event ## if the true event rate is at least 2.95 per 100 participants."},{"path":"https://johnaponte.github.io/ssutil/articles/power_single_rate.html","id":"example-2-30-subjects-power-0-95-0-90-and-0-8","dir":"Articles","previous_headings":"Examples","what":"Example 2: 30 Subjects, Power 0.95, 0.90, and 0.8","title":"Detectable Event Rate for Safety Signal Detection: Using `power_single_rate`","text":"Suppose sample size 30, want know true event rate can potentially detect (least one event) powers 80%, 90%, 95%.","code":"power_single_rate(30, c(0.95, 0.90, 0.8)) ## According to the number of participants, the table shows the power ## to detect at least one event, given a true event rate equal to or higher than: ##  ## | Subjects | Power |                Proportion | ## | -------- | ----- | ------------------------- | ## |       30 |   95% | 9.50 per 100 participants | ## |       30 |   90% | 7.39 per 100 participants | ## |       30 |   80% | 5.22 per 100 participants |"},{"path":"https://johnaponte.github.io/ssutil/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John J. Aponte. Author, maintainer. Chris Gast. Contributor.","code":""},{"path":"https://johnaponte.github.io/ssutil/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aponte J (2025). ssutil: Utilities Sample Size calculation. R package version 0.15, https://johnaponte.github.io/ssutil/.","code":"@Manual{,   title = {ssutil: Utilities for Sample Size calculation},   author = {John J. Aponte},   year = {2025},   note = {R package version 0.15},   url = {https://johnaponte.github.io/ssutil/}, }"},{"path":"https://johnaponte.github.io/ssutil/index.html","id":"ssutil","dir":"","previous_headings":"","what":"Utilities for Sample Size calculation","title":"Utilities for Sample Size calculation","text":"ssutil R package providing suite tools sample size estimation power simulation variety clinical trial designs. includes methods binomial, normal, negative binomial endpoints, well support equivalence non-inferiority testing scenarios. also includes functionality power sample size calculation selecting best group using indifferent-zone approach normal binomial outcomes.","code":""},{"path":"https://johnaponte.github.io/ssutil/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Utilities for Sample Size calculation","text":"Binomial, normal, negative binomial endpoints Equivalence non-inferiority designs Best group selection using indifferent-zone approach normal binomial outcomes Sample size utilities various design types","code":""},{"path":"https://johnaponte.github.io/ssutil/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utilities for Sample Size calculation","text":"","code":"# Install from GitHub (requires remotes or devtools) remotes::install_github(\"johnaponte/ssutil\")"},{"path":"https://johnaponte.github.io/ssutil/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Utilities for Sample Size calculation","text":"Learn use ssutil worked examples: Selection best group using indifferent zone approach binomial outcomes Selection best group using indifferent zone approach normal outcomes Equivalence Trials Negative Binomial Models Non-Inferiority Testing Single Rate Power","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/empirical_power_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Empirical Power Result object — empirical_power_result","title":"Create an Empirical Power Result object — empirical_power_result","text":"Constructs S3 object class empirical_power_result, storing estimated power, confidence interval, number simulations used compute .","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/empirical_power_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Empirical Power Result object — empirical_power_result","text":"","code":"empirical_power_result(x, n, conf.level = 0.95)"},{"path":"https://johnaponte.github.io/ssutil/reference/empirical_power_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Empirical Power Result object — empirical_power_result","text":"x Number successes n Number trials. conf.level Confidence level returned confidence interval power.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/empirical_power_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Empirical Power Result object — empirical_power_result","text":"object class empirical_power_result, list components: power: Estimated power. conf.low: Lower bound confidence interval. conf.high: Upper bound confidence interval. conf.level: Confidence level returned confidence interval. nsim: Number simulations.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/empirical_power_result.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Empirical Power Result object — empirical_power_result","text":"wrap binom.test","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/empirical_power_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Empirical Power Result object — empirical_power_result","text":"","code":"result <- empirical_power_result(   x = 10,   n = 100,   conf.level = 0.95 ) print(result) #> Empirical Power Result #> -----------------------  #> Power:       0.1000 #> 95% CI:      [0.0490, 0.1762] #> Simulations: 100"},{"path":"https://johnaponte.github.io/ssutil/reference/is.empirical_power_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a sim_power_result — is.empirical_power_result","title":"Check if an object is a sim_power_result — is.empirical_power_result","text":"Check object sim_power_result","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/is.empirical_power_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a sim_power_result — is.empirical_power_result","text":"","code":"is.empirical_power_result(x)"},{"path":"https://johnaponte.github.io/ssutil/reference/is.empirical_power_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a sim_power_result — is.empirical_power_result","text":"x R object.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/is.empirical_power_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a sim_power_result — is.empirical_power_result","text":"Logical. TRUE x inherits \"sim_power_result\".","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/multp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Multivariate Normal Probability — multp","title":"Calculate the Multivariate Normal Probability — multp","text":"Computes multivariate normal probabilities arbitrary correlation matrices inverse multz function","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/multp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Multivariate Normal Probability — multp","text":"","code":"multp(q, k, rho, seed = NULL)"},{"path":"https://johnaponte.github.io/ssutil/reference/multp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Multivariate Normal Probability — multp","text":"q Numeric. Quantile distribution. k Integer. Number variables multivariate normal distribution. Must >= 1. rho Numeric. Common correlation coefficient variables (typically 0 1). seed Optional. object specifying random number generator initialized. Passed pmvnorm.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/multp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Multivariate Normal Probability — multp","text":"Numeric. multivariate probability","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/multp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Multivariate Normal Probability — multp","text":"","code":"q <- 1.3       k <- 3         rho <- 0.5     multp(q, k, rho) #> [1] 0.2123156"},{"path":"https://johnaponte.github.io/ssutil/reference/multz.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Upper Equicoordinate Point of a Multivariate Normal Distribution — multz","title":"Calculate the Upper Equicoordinate Point of a Multivariate Normal Distribution — multz","text":"Computes upper equicoordinate quantile multivariate standard normal distribution unit variances common correlation coefficient rho. , returns value \\(z\\) joint probability \\(P(X_1 \\le z, \\ldots, X_n \\le z) = 1 - \\alpha\\).","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/multz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Upper Equicoordinate Point of a Multivariate Normal Distribution — multz","text":"","code":"multz(alpha, k, rho, seed = NULL)"},{"path":"https://johnaponte.github.io/ssutil/reference/multz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Upper Equicoordinate Point of a Multivariate Normal Distribution — multz","text":"alpha Numeric. Significance level (e.g., 0.05 95% confidence level). k Integer. Number variables multivariate normal distribution. Must >= 1. rho Numeric. Common correlation coefficient variables (typically 0 1). seed Optional. object specifying random number generator initialized. Passed qmvnorm.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/multz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Upper Equicoordinate Point of a Multivariate Normal Distribution — multz","text":"Numeric. upper equicoordinate point \\(z\\) joint probability variables less equal \\(z\\) \\(1 - \\alpha\\).","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/multz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Upper Equicoordinate Point of a Multivariate Normal Distribution — multz","text":"","code":"alpha <- 0.1  # Significance level (10%) k <- 3        # Number of variables rho <- 0.5    # Common correlation coefficient multz(alpha, k, rho) #> [1] 1.734036"},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Power to Correctly Select the Best Group in a Binomial Test — power_best_binomial","title":"Power to Correctly Select the Best Group in a Binomial Test — power_best_binomial","text":"Computes exact probability correctly identifying best group outcome follows binomial distribution. assumes p1 probability success best group, success probability groups lower fixed difference dif.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power to Correctly Select the Best Group in a Binomial Test — power_best_binomial","text":"","code":"power_best_binomial(p1, dif, ngroups, npergroup)"},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power to Correctly Select the Best Group in a Binomial Test — power_best_binomial","text":"p1 Numeric. Probability success best group (must [0, 1]). dif Numeric. Difference success probability best group next best (must > 0). ngroups Integer. Number groups (must greater 1). npergroup Integer. Number subjects per group (must positive).","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power to Correctly Select the Best Group in a Binomial Test — power_best_binomial","text":"numeric value representing probability correctly identifying best group.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_binomial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power to Correctly Select the Best Group in a Binomial Test — power_best_binomial","text":"formula based exact method described Sobel Huyett (1957).","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_binomial.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Power to Correctly Select the Best Group in a Binomial Test — power_best_binomial","text":"Sobel, M., & Huyett, M. J. (1957). Selecting Best One Several Binomial Populations. Bell System Technical Journal, 36(2), 537–576. doi:10.1002/j.1538-7305.1957.tb02411.x","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_binomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power to Correctly Select the Best Group in a Binomial Test — power_best_binomial","text":"","code":"power_best_binomial(p1 = 0.8, dif = 0.2, ngroups = 4, npergroup = 50) #> [1] 0.963308"},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Power calculation for the Indifferent-zone approach for normal outcomes — power_best_normal","title":"Power calculation for the Indifferent-zone approach for normal outcomes — power_best_normal","text":"Estimate probability correctly select best group among ngroups groups  difference best group next best least dif(Indifferent-Zone), standard deviation sd","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power calculation for the Indifferent-zone approach for normal outcomes — power_best_normal","text":"","code":"power_best_normal(dif, sd, ngroups, npergroup, seed = NULL)"},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power calculation for the Indifferent-zone approach for normal outcomes — power_best_normal","text":"dif Numeric. Indifferent-zone. Minimum difference considered meaningful. sd Numeric. Common standard deviation response variable. ngroups Integer. Number groups (treatments) compared. npergroup Integer. Number group. seed Optional. Integer seed use internal call multp().","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power calculation for the Indifferent-zone approach for normal outcomes — power_best_normal","text":"Integer. Sample size required per group achieve specified power.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_normal.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Power calculation for the Indifferent-zone approach for normal outcomes — power_best_normal","text":"function uses quantile function multp(), computes critical values selection procedure. implementation assumes equal variances independent samples.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/power_best_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power calculation for the Indifferent-zone approach for normal outcomes — power_best_normal","text":"","code":"power_best_normal(dif = 0.5, sd = 1, ngroups = 3, npergroup = 11) #> [1] 0.801259"},{"path":"https://johnaponte.github.io/ssutil/reference/power_single_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Detectable Event Rate with Specified Power and Sample Size — power_single_rate","title":"Detectable Event Rate with Specified Power and Sample Size — power_single_rate","text":"Estimates minimum true proportion events needed detect least one event, given sample size desired statistical power.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/power_single_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detectable Event Rate with Specified Power and Sample Size — power_single_rate","text":"","code":"power_single_rate(subjects, power)"},{"path":"https://johnaponte.github.io/ssutil/reference/power_single_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detectable Event Rate with Specified Power and Sample Size — power_single_rate","text":"subjects Integer vector integers. Sample size(s). power Numeric vector numerics. Desired power(s), 0 1.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/power_single_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detectable Event Rate with Specified Power and Sample Size — power_single_rate","text":"object class power_single_rate, matrix columns n (sample size), power (requested power), proportion (minimum detectable event rate).","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/power_single_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detectable Event Rate with Specified Power and Sample Size — power_single_rate","text":"","code":"power_single_rate(30, 0.9) #> A study with 30 participants would have 90% power to detect at least one event #> if the true event rate is at least 7.39 per 100 participants. power_single_rate(c(30, 50, 100), 0.9) #> According to the number of participants, the table shows the power #> to detect at least one event, given a true event rate equal to or higher than: #>  #> | Subjects | Power |                Proportion | #> | -------- | ----- | ------------------------- | #> |       30 |   90% | 7.39 per 100 participants | #> |       50 |   90% | 4.50 per 100 participants | #> |      100 |   90% | 2.28 per 100 participants |"},{"path":"https://johnaponte.github.io/ssutil/reference/print.empirical_power_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for empirical_power_result — print.empirical_power_result","title":"Print method for empirical_power_result — print.empirical_power_result","text":"Nicely formats output object class empirical_power_result, showing power estimate, confidence interval, number simulations.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/print.empirical_power_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for empirical_power_result — print.empirical_power_result","text":"","code":"# S3 method for class 'empirical_power_result' print(x, ...)"},{"path":"https://johnaponte.github.io/ssutil/reference/print.empirical_power_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for empirical_power_result — print.empirical_power_result","text":"x object class \"empirical_power_result\". ... arguments passed methods (ignored).","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/prophr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Event Probability in the Experimental Group Given a Hazard Ratio — prophr","title":"Calculate Event Probability in the Experimental Group Given a Hazard Ratio — prophr","text":"Computes event probability experimental group based event probability control group specified hazard ratio, assuming proportional hazards.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/prophr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Event Probability in the Experimental Group Given a Hazard Ratio — prophr","text":"","code":"prophr(p0, hr)"},{"path":"https://johnaponte.github.io/ssutil/reference/prophr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Event Probability in the Experimental Group Given a Hazard Ratio — prophr","text":"p0 Numeric scalar. Probability event control group (0 1). hr Numeric scalar. Hazard ratio (must > 0).","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/prophr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Event Probability in the Experimental Group Given a Hazard Ratio — prophr","text":"Numeric. probability event experimental group.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/prophr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Event Probability in the Experimental Group Given a Hazard Ratio — prophr","text":"useful sample size calculations, example PASS (TM), automatically adjust event rate experimental group.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/prophr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Event Probability in the Experimental Group Given a Hazard Ratio — prophr","text":"","code":"prophr(0.05, 0.6) #> [1] 0.03030722"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_bin_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Power to Rank the Best Group Using Binomial Outcomes — sim_power_best_bin_rank","title":"Simulate Power to Rank the Best Group Using Binomial Outcomes — sim_power_best_bin_rank","text":"Estimates empirical power rank promising group best, based binomial outcomes, via simulation.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_bin_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Power to Rank the Best Group Using Binomial Outcomes — sim_power_best_bin_rank","text":"","code":"sim_power_best_bin_rank(   noutcomes,   p1,   dif,   weights,   ngroups,   npergroup,   nsim,   conf.level = 0.95 )"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_bin_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Power to Rank the Best Group Using Binomial Outcomes — sim_power_best_bin_rank","text":"noutcomes Integer. Number outcomes evaluate. p1 Numeric. Event probability best group (scalar vector length noutcomes). dif Numeric. Difference best group rest (scalar vector length noutcomes). weights Numeric vector. Weights outcome. scalar, applied equally. ngroups Integer. Number groups. npergroup Integer vector. Sample size per group. nsim Integer. Number simulations. conf.level Numeric. Confidence level empirical power estimate","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_bin_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Power to Rank the Best Group Using Binomial Outcomes — sim_power_best_bin_rank","text":"S3 object class empirical_power_result","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_bin_rank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Power to Rank the Best Group Using Binomial Outcomes — sim_power_best_bin_rank","text":"outcome assumed follow independent binomial distribution. best group defined probability least dif higher groups. function sums weighted ranks across multiple outcomes determine top group. multiple outcomes defined, weights can applied prioritize outcomes others. Weights automatically scaled sum 1. group lowest total rank considered best.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_bin_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Power to Rank the Best Group Using Binomial Outcomes — sim_power_best_bin_rank","text":"","code":"if (FALSE) { # \\dontrun{   sim_power_best_bin_rank(   noutcomes = 2,   p1 = 0.80,   dif = 0.15,   weights = 1,   ngroups = 3,   npergroup = 30,   nsim = 1000,   conf.level = 0.95) } # }"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Power to Select the Best Group Using Binomial Outcomes — sim_power_best_binomial","title":"Simulate Power to Select the Best Group Using Binomial Outcomes — sim_power_best_binomial","text":"Estimates empirical power correctly identify best group highest outcome, binomial distribution. Assumes promising group higher success probability others least dif, outcomes independent.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Power to Select the Best Group Using Binomial Outcomes — sim_power_best_binomial","text":"","code":"sim_power_best_binomial(   noutcomes,   p1,   dif,   ngroups,   npergroup,   nsim,   conf.level = 0.95 )"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Power to Select the Best Group Using Binomial Outcomes — sim_power_best_binomial","text":"noutcomes Integer. Number outcomes evaluate. p1 Numeric. Probability promising group (scalar vector). dif Numeric. Difference best group rest. ngroups Integer. Number groups. npergroup Integer vector. Number subjects per group. nsim Integer. Number simulations. conf.level Numeric. Confidence level empirical power estimate","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Power to Select the Best Group Using Binomial Outcomes — sim_power_best_binomial","text":"S3 object class empirical_power_result","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_binomial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Power to Select the Best Group Using Binomial Outcomes — sim_power_best_binomial","text":"Multiple outcomes can evaluated simultaneously. power estimated proportion simulations promising group selected best outcomes.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_binomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Power to Select the Best Group Using Binomial Outcomes — sim_power_best_binomial","text":"","code":"if (FALSE) { # \\dontrun{ sim_power_best_binomial(   noutcomes = 1,   p1 = 0.7,   dif = 0.2,   ngroups = 3,   npergroup = 30,   nsim = 1000 ) } # }"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_norm_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Power to Select Best Group by Ranks (Normal Outcomes) — sim_power_best_norm_rank","title":"Simulate Power to Select Best Group by Ranks (Normal Outcomes) — sim_power_best_norm_rank","text":"Estimates empirical power identify promising group best, using weighted ranks across outcomes, assuming normally distributed outcomes.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_norm_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Power to Select Best Group by Ranks (Normal Outcomes) — sim_power_best_norm_rank","text":"","code":"sim_power_best_norm_rank(   noutcomes,   sd,   dif,   weights,   ngroups,   npergroup,   nsim,   conf.level = 0.95 )"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_norm_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Power to Select Best Group by Ranks (Normal Outcomes) — sim_power_best_norm_rank","text":"noutcomes Integer. Number outcomes evaluate. sd Numeric vector. Standard deviations outcome. dif Numeric vector. Difference means best groups. weights Numeric vector. Weights per outcome. ngroups Integer. Number groups. npergroup Integer vector. Number subjects per group. nsim Integer. Number simulations. conf.level Numeric. Confidence level empirical power estimate","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_norm_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Power to Select Best Group by Ranks (Normal Outcomes) — sim_power_best_norm_rank","text":"S3 object class empirical_power_result","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_norm_rank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Power to Select Best Group by Ranks (Normal Outcomes) — sim_power_best_norm_rank","text":"outcome independent normally distributed. promising group assumed mean least dif higher others. Ranks weighted summed per group across outcomes. weights specified, internally scaled sum 1. promising group always considered first group.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_norm_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Power to Select Best Group by Ranks (Normal Outcomes) — sim_power_best_norm_rank","text":"","code":"if (FALSE) { # \\dontrun{ sim_power_best_norm_rank(   noutcomes = 3,   sd = c(1, 0.8, 1.5),   dif = c(0.2, 0.15, 0.3),   weights = c(0.5, 0.3, 0.2),   ngroups = 3,   npergroup = c(30, 25, 25),   nsim = 1000 ) } # }"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Power to Select Best Group (Normal Outcomes) — sim_power_best_normal","title":"Simulate Power to Select Best Group (Normal Outcomes) — sim_power_best_normal","text":"Estimates empirical power identify promising group best, outcomes normally distributed independent.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Power to Select Best Group (Normal Outcomes) — sim_power_best_normal","text":"","code":"sim_power_best_normal(   noutcomes,   sd,   dif,   ngroups,   npergroup,   nsim,   conf.level = 0.95 )"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Power to Select Best Group (Normal Outcomes) — sim_power_best_normal","text":"noutcomes Integer. Number outcomes evaluate. sd Numeric vector. Standard deviations outcome. Can single value. dif Numeric vector. Difference means best groups. ngroups Number groups compare. npergroup Number subjects per group. Can scalar vector length ngroups. nsim Integer. Number simulations perform. conf.level Numeric. Confidence level empirical power estimate","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Power to Select Best Group (Normal Outcomes) — sim_power_best_normal","text":"S3 object class empirical_power_result","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Power to Select Best Group (Normal Outcomes) — sim_power_best_normal","text":"best group (group 1) assumed mean 0, rest groups mean -dif. Multiple outcomes can evaluated simultaneously. power estimated proportion simulations promising group best outcomes. number subjects per group can specified per group. either case, first group assumed promising.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_best_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Power to Select Best Group (Normal Outcomes) — sim_power_best_normal","text":"","code":"if (FALSE) { # \\dontrun{   sim_power_best_normal(    noutcomes = 2,    sd = c(1, 1.2),    dif = c(0.2, 0.25),    ngroups = 3,    npergroup = c(30, 25, 25),    nsim = 1000   ) } # }"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_equivalence_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical Power for Equivalence (Normal Outcomes) — sim_power_equivalence_normal","title":"Empirical Power for Equivalence (Normal Outcomes) — sim_power_equivalence_normal","text":"Estimates empirical power detect equivalence among multiple groups assuming true difference normally distributed outcomes. Pairwise two-sample t-tests used, equivalence declared confidence intervals differences group means lie entirely within interval defined llimit ulimit.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_equivalence_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical Power for Equivalence (Normal Outcomes) — sim_power_equivalence_normal","text":"","code":"sim_power_equivalence_normal(   ngroups,   npergroup,   sd,   llimit,   ulimit,   nsim,   t_level = 0.95,   conf.level = 0.95 )"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_equivalence_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical Power for Equivalence (Normal Outcomes) — sim_power_equivalence_normal","text":"ngroups Integer. Number groups compare npergroup Integer. Number observations per group. sd Numeric. Standard deviation outcome distribution (common across groups). llimit Numeric. Lower equivalence limit. ulimit Numeric. Upper equivalence limit. nsim Integer. Number simulations perform. t_level Numeric. Confidence level used t-tests (e.g., 0.95 95% CI). conf.level Numeric. Confidence level empirical power estimate","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_equivalence_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical Power for Equivalence (Normal Outcomes) — sim_power_equivalence_normal","text":"S3 object class empirical_power_result","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_equivalence_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical Power for Equivalence (Normal Outcomes) — sim_power_equivalence_normal","text":"function simulates data null hypothesis difference groups calculates proportion simulations pairwise comparisons fall within specified equivalence limits.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_equivalence_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical Power for Equivalence (Normal Outcomes) — sim_power_equivalence_normal","text":"","code":"if (FALSE) { # \\dontrun{ #Equivalence testing for three groups with log-scale outcome sim_power_equivalence_normal(   ngroups = 3,   npergroup = 172,   sd = 0.403,   llimit = log10(2/3),   ulimit = log10(3/2),   nsim = 1000,   t_level = 0.95 ) } # }"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_nbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical Power for Negative Binomial Comparison — sim_power_nbinom","title":"Empirical Power for Negative Binomial Comparison — sim_power_nbinom","text":"Estimates empirical power detect relative risk either specified boundary, depending direction alternative hypothesis. Simulates count data dispersion, fits model glm.nb, evaluates power reject null hypothesis using negative binomial model.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_nbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical Power for Negative Binomial Comparison — sim_power_nbinom","text":"","code":"sim_power_nbinom(   n1,   n2,   ir1,   tm,   rr,   boundary,   dispersion,   alpha,   nsim,   conf.level = 0.95 )"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_nbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical Power for Negative Binomial Comparison — sim_power_nbinom","text":"n1 Integer. Number participants group 1. n2 Integer. Number participants group 2. ir1 Numeric. Incidence rate group 1. tm Numeric. Average exposure time per subject (assumed equal across subjects). rr Numeric. True relative risk groups (group 2 rate = rr × group 1 rate). boundary Numeric. Relative risk boundary null hypothesis. dispersion Numeric. Dispersion parameter (\\(\\phi\\)) negative binomial distribution. alpha Numeric. Type error rate (two-sided). nsim Integer. Number simulation iterations. conf.level Numeric. Confidence level empirical power estimate","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_nbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical Power for Negative Binomial Comparison — sim_power_nbinom","text":"S3 object class empirical_power_result","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_nbinom.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Empirical Power for Negative Binomial Comparison — sim_power_nbinom","text":"Uses alternative parameterization negative binomial: mu mean, size = 1/dispersion. glm.nb, dispersion estimated theta. 'boundary' parameter defines relative risk null hypothesis. rr < 1, rejection occurs upper limit confidence interval boundary. rr > 1, rejection occurs lower limit boundary. alpha parameter two-sided used estimate two-sided confidence intervals","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_nbinom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Empirical Power for Negative Binomial Comparison — sim_power_nbinom","text":"Chris Gast John J. Aponte","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_nbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical Power for Negative Binomial Comparison — sim_power_nbinom","text":"","code":"if (FALSE) { # \\dontrun{ sim_power_nbinom(  n1 = 150, n2 = 150,  ir1 = 0.55, tm = 1.7,  rr = 0.6, boundary = 1,  dispersion = 2,  alpha = 0.05,  nsim = 1000 ) } # }"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_ni_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical Power for Non-Inferiority (Normal Outcomes) — sim_power_ni_normal","title":"Empirical Power for Non-Inferiority (Normal Outcomes) — sim_power_ni_normal","text":"Estimates empirical power declare non-inferiority two groups across multiple outcomes using t-tests. Simulates normally distributed data null (difference) applies non-inferiority rules based user-defined required optional tests.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_ni_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical Power for Non-Inferiority (Normal Outcomes) — sim_power_ni_normal","text":"","code":"sim_power_ni_normal(   nsim,   npergroup,   ntest,   ni_limit,   test_req,   test_opt,   sd,   corr = 0,   t_level = 0.95,   conf.level = 0.95 )"},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_ni_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical Power for Non-Inferiority (Normal Outcomes) — sim_power_ni_normal","text":"nsim Integer. Number simulations perform. npergroup Integer. Number observations per group. ntest Integer. Number tests (outcomes) compare. ni_limit Numeric. Limit declare non-inferiority. Can scalar vector length ntest. test_req Integer. Number required tests must show non-inferiority (first test_req tests). test_opt Integer. Number optional tests must also show non-inferiority remaining tests. sd Numeric. Standard deviation(s) outcomes. Scalar vector length ntest. corr Numeric. Correlation tests. Scalar (common correlation), vector length ntest*(ntest-1)/2. t_level Numeric. Confidence level used t-tests (e.g., 0.95 95% CI).scalar vector length ntest. conf.level Numeric. Confidence level empirical power estimate","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_ni_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical Power for Non-Inferiority (Normal Outcomes) — sim_power_ni_normal","text":"S3 object class empirical_power_result","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_ni_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical Power for Non-Inferiority (Normal Outcomes) — sim_power_ni_normal","text":"test considered non-inferior lower bound confidence interval greater specified non-inferiority limit. Overall non-inferiority declared test_req least test_opt remaining tests non-inferior.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_ni_normal.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Empirical Power for Non-Inferiority (Normal Outcomes) — sim_power_ni_normal","text":"one test used, correlation ignored. Use correlation 0 independent outcomes using correlation vector, must match number test pairs: ntest*(ntest-1)/2, order: (1,2), (1,3), ..., (1,ntest), (2,3), ..., (ntest-1,ntest). covariance matrix derived correlation matrix standard deviations. example: ntest = 3 corr = c(0.2, 0.3, 0.4), resulting correlation matrix :","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/sim_power_ni_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical Power for Non-Inferiority (Normal Outcomes) — sim_power_ni_normal","text":"","code":"if (FALSE) { # \\dontrun{ sim_power_ni_normal(   nsim = 1000,   npergroup = 250,   ntest = 7,   ni_limit = log10(2/3),   test_req = 2,   test_opt = 3,   sd = 0.4,   corr = 0,   t_level = 0.05 ) } # }"},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Size to Select the Best Group in a Binomial Test — ss_best_binomial","title":"Sample Size to Select the Best Group in a Binomial Test — ss_best_binomial","text":"Computes minimum sample size per group required achieve target probability correctly selecting best group binomial test. best group assumed success probability p1, groups p1 - dif.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Size to Select the Best Group in a Binomial Test — ss_best_binomial","text":"","code":"ss_best_binomial(power, p1, dif, ngroups, max_n = 1000)"},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Size to Select the Best Group in a Binomial Test — ss_best_binomial","text":"power Numeric. Desired probability correctly selecting best group ([0, 1]). p1 Numeric. Probability success best group ([0, 1]). dif Numeric. Difference success probability next best group (> 0). ngroups Integer. Number groups (must > 1). max_n Integer. Maximum sample size evaluate (default 1000).","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Size to Select the Best Group in a Binomial Test — ss_best_binomial","text":"integer representing minimum sample size per group required reach specified power.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_binomial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample Size to Select the Best Group in a Binomial Test — ss_best_binomial","text":"function searches smallest npergroup power power_best_binomial least target power.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_binomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Size to Select the Best Group in a Binomial Test — ss_best_binomial","text":"","code":"ss_best_binomial(power = 0.9, p1 = 0.8, dif = 0.2, ngroups = 4) #> [1] 33"},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Size for Selecting the Best Treatment in a Normal Response (Indifference-Zone) — ss_best_normal","title":"Sample Size for Selecting the Best Treatment in a Normal Response (Indifference-Zone) — ss_best_normal","text":"Calculates minimum common sample size per group needed achieve specified probability (power) correctly selecting best group using indifference-zone approach. method assumes normally distributed responses known common standard deviation.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Size for Selecting the Best Treatment in a Normal Response (Indifference-Zone) — ss_best_normal","text":"","code":"ss_best_normal(power, dif, sd, ngroups, seed = NULL)"},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Size for Selecting the Best Treatment in a Normal Response (Indifference-Zone) — ss_best_normal","text":"power Numeric. Desired probability correctly selecting best group. dif Numeric. Indifferent-zone. Minimum difference considered meaningful. sd Numeric. Common standard deviation response variable. ngroups Integer. Number groups (treatments) compared. seed Optional. Integer seed use internal call multz().","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Size for Selecting the Best Treatment in a Normal Response (Indifference-Zone) — ss_best_normal","text":"Integer. Sample size required per group achieve specified power.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_normal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample Size for Selecting the Best Treatment in a Normal Response (Indifference-Zone) — ss_best_normal","text":"indifference-zone approach guarantees probability correct selection least power, assuming best group's mean exceeds others least dif. calculation based Bechhofer's Procedure Nb.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_normal.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sample Size for Selecting the Best Treatment in a Normal Response (Indifference-Zone) — ss_best_normal","text":"function uses quantile function multz(), computes critical values selection procedure. implementation assumes equal variances independent samples.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_normal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample Size for Selecting the Best Treatment in a Normal Response (Indifference-Zone) — ss_best_normal","text":"Bechhofer, R.E., Santner, T.J., & Goldsman, D.M. (1995). Design Analysis Experiments Statistical Selection, Screening, Multiple Comparisons. Wiley Series Probability Statistics. ISBN: 0-471-57427-9.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_best_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Size for Selecting the Best Treatment in a Normal Response (Indifference-Zone) — ss_best_normal","text":"","code":"ss_best_normal( power = 0.8, dif = 0.5, sd = 1, ngroups = 3) #> [1] 10.92462"},{"path":"https://johnaponte.github.io/ssutil/reference/ss_ni_ve.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Size and Non-Inferiority Margin for Vaccine Efficacy Trials — ss_ni_ve","title":"Sample Size and Non-Inferiority Margin for Vaccine Efficacy Trials — ss_ni_ve","text":"Computes non-inferiority margin, number events, maximum hazard ratio (HR) declare non-inferiority vaccine efficacy (VE) trials, based approach described Fleming et al. (2021).","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_ni_ve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Size and Non-Inferiority Margin for Vaccine Efficacy Trials — ss_ni_ve","text":"","code":"ss_ni_ve(ve_lci, alpha = 0.025, power = 0.9, use70 = FALSE, preserve = 0.5)"},{"path":"https://johnaponte.github.io/ssutil/reference/ss_ni_ve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Size and Non-Inferiority Margin for Vaccine Efficacy Trials — ss_ni_ve","text":"ve_lci Numeric. Lower bound current vaccine's efficacy (e.g., 0.95 95% VE). alpha Numeric. Type error rate (default = 0.025). power Numeric. Desired power test (default = 0.90). use70 Logical. TRUE, assumes least 30% VE new vaccine (90–70 rule); otherwise, preserves fixed fraction reference VE. preserve Numeric. Proportion current vaccine's efficacy preserve use70 = FALSE (default = 0.5).","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_ni_ve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Size and Non-Inferiority Margin for Vaccine Efficacy Trials — ss_ni_ve","text":"named list : Upper limit HR used estimate sample size: Hazard ratio corresponding ve_lci. Non-inferior margin HR scale: Non-inferiority margin expressed hazard ratio. Alpha: type error used. Power: power used. Total number events: Total number events required trial. Max HR declare NI: Maximum observed hazard ratio satisfies non-inferiority criterion. Max number events experimental group: Maximum number events experimental group still compatible non-inferiority. Non-inferior criteria: Description applied non-inferiority rule (\"least 30% VE\" \"preserved effect\").","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_ni_ve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample Size and Non-Inferiority Margin for Vaccine Efficacy Trials — ss_ni_ve","text":"method applies either 95–95 rule 90–70 rule, depending whether minimum VE 30% assumed (use70 = TRUE) 50% current VE preserved. implementation approximates Table 1 paper using exact binomial confidence intervals via binom.test nBinomial1Sample function gsDesign.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_ni_ve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample Size and Non-Inferiority Margin for Vaccine Efficacy Trials — ss_ni_ve","text":"Fleming, T.R., Powers, J.H., & Huang, Y. (2021). use active controls non-inferiority studies evaluating COVID-19 vaccines. Clinical Trials, 18(3), 335–342. doi:10.1177/1740774520988244","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ss_ni_ve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Size and Non-Inferiority Margin for Vaccine Efficacy Trials — ss_ni_ve","text":"","code":"ss_ni_ve(ve_lci = 0.95) #> $`Upper limit of the HR used to estimate the sample size` #> [1] 0.05 #>  #> $`Non-inferior margin in HR scale` #> [1] 4.472136 #>  #> $Alpha #> [1] 0.025 #>  #> $Power #> [1] 0.9 #>  #> $`Total number of events` #> [1] 28 #>  #> $`Max HR to declare NI` #> [1] 1.8 #>  #> $`Max number of events in the experimental group` #> [1] 18 #>  #> $`Non-inferior criteria` #> [1] \"Preserve at least 50% of the VE in the new vaccine\" #>"},{"path":"https://johnaponte.github.io/ssutil/reference/ssutil-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ssutil: Utilities for Sample Size calculation — ssutil-package","title":"ssutil: Utilities for Sample Size calculation — ssutil-package","text":"Utilities sample size estimation simulations clinical trials.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/ssutil-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ssutil: Utilities for Sample Size calculation — ssutil-package","text":"Maintainer: John J. Aponte john.j.aponte@gmail.com (ORCID) contributors: Chris Gast cgast@path.org [contributor]","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/tidy.empirical_power_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy Method for empirical_power_result — tidy.empirical_power_result","title":"Tidy Method for empirical_power_result — tidy.empirical_power_result","text":"Creates one-row tibble power estimate confidence interval.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/tidy.empirical_power_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy Method for empirical_power_result — tidy.empirical_power_result","text":"","code":"# S3 method for class 'empirical_power_result' tidy(x, ...)"},{"path":"https://johnaponte.github.io/ssutil/reference/tidy.empirical_power_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy Method for empirical_power_result — tidy.empirical_power_result","text":"x empirical_power_result object. ... Ignored.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/tidy.empirical_power_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy Method for empirical_power_result — tidy.empirical_power_result","text":"tibble columns: power, conf.low, conf.high,  conf.level. nsim.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/wcs_power_best_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Worst‐Case Scenario Power for the Best Binomial Group — wcs_power_best_binomial","title":"Worst‐Case Scenario Power for the Best Binomial Group — wcs_power_best_binomial","text":"Searches probability best‐performing group yields lowest statistical power, given indifference zone specification, number groups, number subjects per group.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/wcs_power_best_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Worst‐Case Scenario Power for the Best Binomial Group — wcs_power_best_binomial","text":"","code":"wcs_power_best_binomial(dif, ngroups, npergroup)"},{"path":"https://johnaponte.github.io/ssutil/reference/wcs_power_best_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Worst‐Case Scenario Power for the Best Binomial Group — wcs_power_best_binomial","text":"dif Numeric. Indifference zone specification (difference threshold). ngroups Integer. Number groups compare. npergroup Integer. Number subjects per group.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/wcs_power_best_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Worst‐Case Scenario Power for the Best Binomial Group — wcs_power_best_binomial","text":"named list components: p1 Numeric. Probability best group yields minimum power. minimum_power Numeric. minimum power achieved p1.","code":""},{"path":"https://johnaponte.github.io/ssutil/reference/wcs_power_best_binomial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Worst‐Case Scenario Power for the Best Binomial Group — wcs_power_best_binomial","text":"Defines internal function fx wraps power_best_binomial supplied parameters, uses optimize interval [0,1] find probability p1 minimizes resulting power.","code":""},{"path":[]},{"path":"https://johnaponte.github.io/ssutil/reference/wcs_power_best_binomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Worst‐Case Scenario Power for the Best Binomial Group — wcs_power_best_binomial","text":"","code":"wcs_power_best_binomial(dif = 0.1, ngroups = 3, npergroup = 50) #> $p1 #> [1] 0.5541703 #>  #> $minimum_power #> [1] 0.7410576 #>"},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-0150","dir":"Changelog","previous_headings":"","what":"ssutil 0.15.0","title":"ssutil 0.15.0","text":"Remove lf_config functions useful. Replace worst case scenario function. Modify sim_best_binomial() function select best using ranks rather custom approach == max(). Make uniform parameters names Provide standardized output simulations","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-0140","dir":"Changelog","previous_headings":"","what":"ssutil 0.14.0","title":"ssutil 0.14.0","text":"Re-factoring entire package. Functions calculate power based simulation now start prefix sim_. ni_fleming renamed ni_ve. multz function modified correctly handle case one group. Improve documentation","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-0130","dir":"Changelog","previous_headings":"","what":"ssutil 0.13.0","title":"ssutil 0.13.0","text":"Added probhr function estimate probability event experimental group based control group probability hazard ratio, assuming proportional hazards.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-0120","dir":"Changelog","previous_headings":"","what":"ssutil 0.12.0","title":"ssutil 0.12.0","text":"Added option preserve effect. Modified formula used Fleming method.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-0110","dir":"Changelog","previous_headings":"","what":"ssutil 0.11.0","title":"ssutil 0.11.0","text":"Added 30% criterion ni_fleming function.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-0101","dir":"Changelog","previous_headings":"","what":"ssutil 0.10.1","title":"ssutil 0.10.1","text":"Updated messages displayed ni_fleming.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-0100","dir":"Changelog","previous_headings":"","what":"ssutil 0.10.0","title":"ssutil 0.10.0","text":"power_best_binomial power_best_normal updated match rank-based equivalents. Now, dif represents difference promising group rest. binomial tests, prob now probability promising group (previously referred groups), dif defines much lower groups .","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-090","dir":"Changelog","previous_headings":"","what":"ssutil 0.9.0","title":"ssutil 0.9.0","text":"Added support weights power_best_norm_ranks power_best_bin_rank. Note: API backward compatible two functions.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-080","dir":"Changelog","previous_headings":"","what":"ssutil 0.8.0","title":"ssutil 0.8.0","text":"Added power_best_norm_rank empirically estimate power normal distributions based ranks.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-070","dir":"Changelog","previous_headings":"","what":"ssutil 0.7.0","title":"ssutil 0.7.0","text":"Added function calculate non-inferiority vaccine trials following Fleming et al.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-060","dir":"Changelog","previous_headings":"","what":"ssutil 0.6.0","title":"ssutil 0.6.0","text":"Fixed error power_test_binomial , absence ties, sample function randomly selected number instead sampling range. Fixed issue power_best_normal. power_best_binomial now returns data frame power 95% confidence interval. power_best_normal now returns data frame power 95% confidence interval. power_ni_normal now includes number simulations output data frame. Added power_best_bin_rank, selects best group based ranks, instead assuming highest value power_best_binomial.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-050","dir":"Changelog","previous_headings":"","what":"ssutil 0.5.0","title":"ssutil 0.5.0","text":"Added power_ni_normal function.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-041","dir":"Changelog","previous_headings":"","what":"ssutil 0.4.1","title":"ssutil 0.4.1","text":"Fixed error ggplot_prob_lowest_power graph. Fixed global variables cleaned imports.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-040","dir":"Changelog","previous_headings":"","what":"ssutil 0.4.0","title":"ssutil 0.4.0","text":"Added power_equivalence_normal function.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-030","dir":"Changelog","previous_headings":"","what":"ssutil 0.3.0","title":"ssutil 0.3.0","text":"Added power_best_binomial function related helpers.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-020","dir":"Changelog","previous_headings":"","what":"ssutil 0.2.0","title":"ssutil 0.2.0","text":"Added power_best_normal function related helpers.","code":""},{"path":"https://johnaponte.github.io/ssutil/news/index.html","id":"ssutil-011","dir":"Changelog","previous_headings":"","what":"ssutil 0.1.1","title":"ssutil 0.1.1","text":"Added NEWS.md file track package changes. Added power_single_rate function.","code":""}]
